name: Foodgram workflow

on:
  push:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.11
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            venv
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r ./backend/requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8 --ignore=I004,I001,E121,E123,E126,E226,E24,E704,W503,W504 --extend-exclude=migrations/,.git,.gitignore,*.pot,*.py[co],__pycache__,venv,.env
#          python manage.py test
#      - name: Test with postman
#        uses: matt-ball/newman-action@v3.0.1
#        with:
#          collection: ./postman-collection/diploma.postman_collection.json
#          environment: ./postman-collection/...

#      - name: Upload test results
#        uses: actions/upload-artifact@v2
#        if: always()
#        with:
#          name: test-results
#          path: |
#            test-results.xml
#            newman/

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-22.04
    needs: tests
#    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push ${service} to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.service }}/
#          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/{{ matrix.service }}:latest

  deploy:
    runs-on: ubuntu-22.04
    needs: build_and_push_to_docker_hub
#    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          passphrase: ${{ secrets.PROD_PASSPHRASE }}
          script: |
            sudo docker compose stop
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            rm .env
            touch .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            sudo docker compose up --build -d

  send_message:
    runs-on: ubuntu-22.04
    needs: deploy
    steps:
      - name: Telegram Message Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!

