name: Foodgram workflow

on:
  push:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.11
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            venv
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and flake8, and Postman
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r ./backend/requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8 --ignore=I004,I001,E121,E123,E126,E226,E24,E704,W503,W504 --extend-exclude=migrations/,.git,.gitignore,*.pot,*.py[co],__pycache__,venv,.env


  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-22.04
    needs: tests
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push ${service} to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}/
#          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest

  deploy:
    runs-on: ubuntu-22.04
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          passphrase: ${{ secrets.PROD_PASSPHRASE }}
          script: |
            sudo docker-compose -f foodgram/infra/docker-compose.production.yml down
            if [ -n "$(sudo docker image ls -q ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest)" ]; then
              sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend
            if [ -n "$(sudo docker image ls -q ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest)" ]; then
              sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend
            if [ -f ".env" ]; then
              rm .env
            fi 
            touch .env
            cat << EOF > .env
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            DEBUG=${{ secrets.DEBUG }}
            EOF

            sudo docker-compose -f foodgram/infra/docker-compose.production.yml up --build -d
            sudo docker-compose -f foodgram/infra/docker-compose.production.yml exec -T backend python manage.py makemigrations
            sudo docker-compose -f foodgram/infra/docker-compose.production.yml exec -T backend python manage.py migrate
            sudo docker-compose -f foodgram/infra/docker-compose.production.yml exec -T backend python manage.py load
            sudo docker-compose -f foodgram/infra/docker-compose.production.yml exec -T backend python manage.py collectstatic --no-input

      - name: Install Postman CLI
        run: |
            curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "${{ github.workspace }}/postman/diploma.json" --integration-id "150662-${{ github.run_id }}"

  send_message:
    runs-on: ubuntu-22.04
    needs: deploy
    steps:
      - name: Telegram Message Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!

